(define (entry tree) (car tree))

(define (left-branch tree) (cadr tree))

(define (right-branch tree) (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) #f)
	((= x (entry set)) #t)
	((< x (entry set))
	 (element-of-set? x (left-branch set)))
	((> x (entry set))
	 (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
	((= x (entry set)) set)
	((< x (entry set))
	 (make-tree (entry set)
		    (adjoin-set x (left-branch set))
		    (right-branch set)))
	((> x (entry set))
	 (make-tree (entry set)
		    (left-branch set)
		    (adjoin-set x (right-branch set))))))

(define (tree->list tree)
  (if (null? tree)
      '()
      (append (tree->list (left-branch tree))
	      (cons (entry tree)
		    (tree->list (right-branch tree))))))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
	(let ((left-result (partial-tree elts left-size)))
	  (let ((left-tree (car left-result))
		(non-left-elts (cdr left-result))
		(right-size (- n (+ left-size 1))))
	    (let ((this-entry (car non-left-elts))
		  (right-result (partial-tree (cdr non-left-elts)
					      right-size)))
	      (let ((right-tree (car right-result))
		    (remaining-elts (cdr right-result)))
		(cons (make-tree this-entry left-tree right-tree)
		      remaining-elts))))))))

;;; 时间复杂度: O(N)
(define (union-set->tree tree1 tree2)
  (let ((list1 (tree->list tree1))
	(list2 (tree->list tree2)))
    (list->tree (union-set list1 list2))))

;;; 时间复杂度：O(N)
(define (intersection-set->tree tree1 tree2)
  (let ((list1 (tree->list tree1))
	(list2 (tree->list tree2)))
    (list->tree (intersection-set list1 list2))))

;;; 时间复杂度：O(N * LogN)
(define (union-tree tree1 tree2)
  (cond ((null? tree1) tree2)
	((null? tree2) tree1)
	(else
	 (let ((new-tree (adjoin-set (entry tree1) tree2)))
	   (union-tree (right-branch tree1) (union-tree (left-branch tree1) new-tree))))))

;;; 时间复杂度：O(N * LogN)
(define (intersection-tree tree1 tree2)
  (if (or (null? tree1) (null? tree2))
      '()
      (let ((x (entry tree1))
	    (left-intersection (intersection-tree (left-branch tree1) tree2))
	    (right-intersection (intersection-tree (right-branch tree1) tree2)))
	(if (element-of-set? x tree2)
	    (union-tree right-intersection (adjoin-set x left-intersection))
	    (union-tree right-intersection left-intersection)))))

(define tree1 (list->tree (list 1 3 5 7 9 11)))
(define tree2 (list->tree (list 1 2 3 4 5 6)))
(tree->list (union-tree tree1 tree2)); => (1 2 3 4 5 6 7 9 11)
(tree->list (intersection-tree tree1 tree2)) ; => (1 3 5)
