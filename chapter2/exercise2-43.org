#+LATEX_CLASS: ramsay-org-article
#+LATEX_CLASS_OPTIONS: [oneside,A4paper,12pt]
#+AUTHOR: Ramsay Leung
#+EMAIL: ramsayleung@gmail.com
#+DATE: 2022-11-20 日 19:11

练习2-43:
#+begin_src scheme
  (define (queens board-size)
    (define (queen-cols k)
      (if (= k 0)
	  (list empty-board)
	  (filter (lambda (positions) (safe? k positions))
		  (flatmap
		   (lambda (rest-of-queens)
		     (map (lambda (new-row)
			    (adjoin-position new-row k rest-of-queens))
			  (enumerate-iterval 1 board-size)))
		   (queen-cols (- k 1))))))
    (queen-cols board-size))

  (define (louis-queens board-size)
    (define (queen-cols k)
      (if (= k 0)
	  (list empty-board)
	  (filter (lambda (positions) (safe? k positions))
		  (flatmap
		   (lambda (new-row)
		     (map (lambda (rest-of-queens)
			    (adjoin-position new-row k rest-of-queens))
			  (queen-cols (- k 1))))
		   (enumerate-iterval 1 board-size)))))
    (queen-cols board-size))
#+end_src

Louis版本的八皇后解法与2-42常规版本的八皇后解法，差别就在于 =queen-cols= 是放在内层循环，还是外层循环，所以关键是 =queen-cols= 函数。

假设 =boarder-size= 为 =N= ，常规版本的解法递归调用了 =N+1= 次 =queen-cols=，而 =queen-cols= 函数调用了 =N= 次 =adjoin-position= 函数。
假设 =adjoin-position= 函数时间复杂度为常量，那么 =queen-cols= 的时间复杂度为 =O(N)= ，常规解法的时间复杂度为 =O(N * (N +1))= ，即 =O($N^2$)= 。


而对于Louis 版本解法，=queen-cols= 每次调用时，都会递归调用N 次 =queen-cols=, 而递归调用 =queen-cols= 时，=queen-cols= 又会递归调用自己，没完没了。这个调用树就是个N 叉树，每个子树有N 个子节点，树的深度为N，所以 =queen-cols= 的时间复杂为 =O(N^N)=.

$\frac{N^N}{N^2}$ = $N ^ {N-2}$, 所以Louis的解法耗时是 $N ^ {N-2}$ * T

